apiVersion: apps/v1
kind: Deployment
metadata:
  name: pi-hole
spec:
  selector:
    matchLabels:
      deployment: pi-hole
  serviceAccountName: pihole
  template:
    metadata:
      labels:
        deployment: pi-hole
    spec:
      initContainers:
        - name: setup-ftl
          envFrom:
            - configMapRef:
                name: pihole-env
            - secretRef:
                name: pihole-webpassword
          image: pihole/pihole:latest
          command:
            - /bin/bash
            - -c
            - |
              set -e
              if [ "${PH_VERBOSE:-0}" -gt 0 ] ; then
                  set -x ;
              fi

              # The below functions are all contained in bash_functions.sh
              # shellcheck source=/dev/null
              . /usr/local/bin/bash_functions.sh

              # shellcheck source=/dev/null
              SKIP_INSTALL=true . /etc/.pihole/automated\ install/basic-install.sh

              echo "  [i] Starting docker specific checks & setup for docker pihole/pihole"

              # Initial checks
              # ===========================
              # fix_capabilities
              validate_env || exit 1
              ensure_basic_configuration

              # Web interface setup
              # ===========================
              setup_web_port
              load_web_password_secret
              setup_web_password
              setup_web_theme
              setup_web_temp_unit
              setup_web_layout
              setup_web_php_env

              # lighttpd setup
              # ===========================
              setup_ipv4_ipv6
              setup_lighttpd_bind

              # Misc Setup
              # ===========================
              installCron
              setup_blocklists

              # FTL setup
              # ===========================
              setup_FTL_upstream_DNS
              [[ -n "${DHCP_ACTIVE}" && ${DHCP_ACTIVE} == "true" ]] && echo "Setting DHCP server" && setup_FTL_dhcp
              apply_FTL_Configs_From_Env
              setup_FTL_User
              setup_FTL_Interface
              setup_FTL_ListeningBehaviour
              setup_FTL_CacheSize
              setup_FTL_query_logging
              setup_FTL_server || true
              [ -n "${DNS_FQDN_REQUIRED}" ] && change_setting "DNS_FQDN_REQUIRED" "$DNS_FQDN_REQUIRED"
              [ -n "${DNSSEC}" ] && change_setting "DNSSEC" "$DNSSEC"
              [ -n "${DNS_BOGUS_PRIV}" ] && change_setting "DNS_BOGUS_PRIV" "$DNS_BOGUS_PRIV"
              # The following must be called last! It will source setupVars.conf and override any env vars users pass in before they have been applied
              setup_FTL_ProcessDNSSettings

              test_configs

              [ -f /.piholeFirstBoot ] && rm /.piholeFirstBoot

              echo "  [i] Docker start setup complete"
              echo ""


              echo "  [i] pihole-FTL ($FTL_CMD) will be started as ${DNSMASQ_USER}"
              echo ""
          securityContext:
            runAsNonRoot: true
            capabilities:
              add:
                - NET_BIND_SERVICE
                - CHOWN
              drop:
                - NET_ADMIN
                - NET_RAW
      containers:
        - name: ftl
          image: pihole/pihole:latest
          command:
            - /usr/bin/pihole-FTL
            - no-daemon
          resources:
            limits:
              memory: 128Mi
              cpu: 500m
            requests:
              memory: 64Mi
              cpu: 10m
          ports:
            - containerPort: 53
              name: udpdns
              protocol: UDP
            - containerPort: 53
              name: tcpdns
              protocol: TCP
            - containerPort: 80
              name: http
              protocol: TCP
          securityContext:
            runAsNonRoot: true
            capabilities:
              add:
                - NET_BIND_SERVICE
              drop:
                - NET_ADMIN
                - NET_RAW
          volumeMounts:
            - name: pihole-config
              mountPath: /etc/pihole
            - name: dnsmasq-config
              mountPath: /etc/dnsmasq.d
        - name: cron
          image: pihole/pihole:latest
          command:
            - /usr/bin/cron
            - -f
          resources:
            limits:
              memory: 128Mi
              cpu: 500m
            requests:
              memory: 64Mi
              cpu: 10m
          volumeMounts:
            - name: pihole-config
              mountPath: /etc/pihole
            - name: dnsmasq-config
              mountPath: /etc/dnsmasq.d
        - name: web-ui
          image: pihole/pihole:latest
          command:
            - lighttpd
            - -D
            - -f
            - /etc/lighttpd/lighttpd.conf
          resources:
            limits:
              memory: 128Mi
              cpu: 500m
            requests:
              memory: 64Mi
              cpu: 10m
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          securityContext:
            runAsNonRoot: true
            capabilities:
              add:
                - NET_BIND_SERVICE
          volumeMounts:
            - name: pihole-config
              mountPath: /etc/pihole
            - name: dnsmasq-config
              mountPath: /etc/dnsmasq.d
        - name: pihole-exporter
          image: ekofr/pihole-exporter:latest
          env:
            - name: PIHOLE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: WEBPASSWORD
                  name: pihole-webpassword
          ports:
            - containerPort: 9617
              name: metrics
              protocol: TCP
          resources:
            limits:
              memory: 128Mi
              cpu: 50m
            requests:
              memory: 64Mi
              cpu: 10m
      volumes:
        - name: pihole-config
          persistentVolumeClaim:
            claimName: pihole-config
        - name: dnsmasq-config
          persistentVolumeClaim:
            claimName: dnsmasq-config
