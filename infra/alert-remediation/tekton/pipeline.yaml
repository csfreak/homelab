apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: alertmanager-remediation-pipeline
spec:
  params:
    - name: status
      enum: 
        - firing
        - resolved
      type: string
      default: firing
    - name: labels
      type: array
      description: array of labels in key=value format
    - name: alertname
      type: string
      description: alertname
    - name: severity
      enum:
        - critical
        - warning
        - info
      decription: severity of alert
      default: info
  tasks:
    - name: parse-node-exporter-labels
      when: 
        - input: $(params.status)
          operator: in
          values: ["firing"]
        - input: $(params.alertname)
          operator: in
          values: ["NodeExporterBrokenPipe"]
      params:
        - name: labels
          value: $(params.labels)
      taskSpec:
        params:
          - name: labels
            type: array
        results:
          - name: node
            type: string
          - name: namespace
            type: string
          - name: service
            type: string
          - name: pod
            type: string
        steps:
          - name: parse-labels
            image: homelab.docker.homelab.csfreak.com/homelab/ubi-task@sha256:b537e2bf9ea9e49cf7974dc907ac658b72c315546ded0e3902adf0408584f647
            env:
              - name: LABELS
                value: "$(params.labels[*])"
            script: |
              #!/usr/bin/env bash

              set -e

              for label in LABELS; do 
                labelarr=(${label//;/ })
                key=${labelarr[1]}
                value=${labelarr[2]}
                echo "processing label ${key} with value ${value}"
                case "${key}" in
                  "kubernetes_pod_name")
                    output = $(results.pod.path) 
                    ;;
                  "namespace")
                    output = $(results.namespace.path) 
                    ;;
                  "kubernetes_host")
                    output = $(results.node.path) 
                    ;;
                  "service")
                    output = $(results.service.path) 
                    ;;
                  "*")
                    output = ""
                    echo "WARNING: unknown label ${key}" >&2
                    ;;
                esac
                if [ -z "${output}" ]; then
                  echo "${value}" > ${output}
                fi
              done
    - name: delete-node-exporter-pod
      needs: parse-node-exporter-labels
      params:
        - name: SCRIPT
          value: |
            PODNODE="$(oc get po/$(tasks.parse-node-exporter-labels.results.pod) -n $(tasks.parse-node-exporter-labels.node) | jq -r '.spec.nodeName')"
            if [ "${PODNODE}" != "$(tasks.parse-node-exporter-labels.results.node)"]; then
              echo "ERROR: pod $(tasks.parse-node-exporter-labels.results.pod) not on $(tasks.parse-node-exporter-labels.node)"
              exit 1
            fi
            echo "deleting po/$(tasks.parse-node-exporter-labels.results.pod) from $(tasks.parse-node-exporter-labels.node) in $(tasks.parse-node-exporter-labels.namespace) namespace"
            oc delete po/$(tasks.parse-node-exporter-labels.results.pod) -n $(tasks.parse-node-exporter-labels.namespace)
      taskRef:
        params:
          - name: kind
            value: task
          - name: name
            value: openshift-client
          - name: namespace
            value: openshift-pipelines
        resolver: cluster