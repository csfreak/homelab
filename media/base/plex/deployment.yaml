apiVersion: apps/v1
kind: Deployment
metadata:
  name: plex
  annotations:
    image.openshift.io/triggers: >-
      [{"from":{"kind":"ImageStreamTag","name":"plex:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"plex-server\")].image"},
      {"from":{"kind":"ImageStreamTag","name":"plex_exporter:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"plex-metrics\")].image"},
      {"from":{"kind":"ImageStreamTag","name":"vector:latest-distroless-libc"},"fieldPath":"spec.template.spec.containers[?(@.name==\"plex-logs\")].image"}]
    app.openshift.io/connects-to: '[{"apiVersion": "v1","kind":"PersistentVolumeClaim","name":"shared-media-ssd"},{"apiVersion": "v1","kind":"PersistentVolumeClaim","name":"shared-media-hdd"}]'
spec:
  replicas: 1
  revisionHistoryLimit: 2
  strategy:
    type: Recreate
  selector:
    matchLabels:
      deployment: plex
  template:
    metadata:
      labels:
        deployment: plex
    spec:
      serviceAccountName: media-runas-user
      terminationGracePeriodSeconds: 120
      initContainers:
        - name: cleanup-pidfile
          image: image-registry.openshift-image-registry.svc:5000/openshift/cli
          volumeMounts:
            - name: config
              mountPath: /config
          env:
            - name: PIDFILE
              value: "/config/Library/Application\ Support/Plex\ Media\ Server/plexmediaserver.pid"
          command:
            - sh
            - -c
            - "if [ -e \"${PIDFILE}\" ] ; then echo \"Deleting ${PIDFILE}\"; rm \"${PIDFILE}\"; else echo \"Nothing to do\n${PIDFILE} not found\"; fi; exit 0"
      containers:
        - name: plex-server
          image: image-registry.openshift-image-registry.svc:5000/media/plex
          readinessProbe:
            httpGet:
              path: /identity
              port: 32400
            initialDelaySeconds: 15
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /identity
              port: 32400
            initialDelaySeconds: 10
            timeoutSeconds: 10
          ports:
            - name: pms
              containerPort: 32400
              protocol: TCP
          envFrom:
            - secretRef:
                name: plex-token
          env:
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources:
            requests:
              memory: 4Gi
              cpu: "3"
              gpu.intel.com/i915: "1"
            limits:
              memory: 8Gi
              cpu: "6"
              gpu.intel.com/i915: "1"
          volumeMounts:
            - name: datassd
              mountPath: /data/ssd
            - name: datahdd
              mountPath: /data/hdd
            - name: config
              mountPath: /config
            - name: transcode
              mountPath: /data/transcode
        - args:
            - "--config"
            - "/etc/vector/plex-logs.toml"
          image: vector:latest-distroless-libc
          imagePullPolicy: IfNotPresent
          name: plex-logs
          resources:
            requests:
              cpu: 10m
              memory: 100Mi
            limits:
              cpu: 100m
              memory: 250Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "ALL"
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: log-config
              mountPath: /etc/vector
            - name: config
              mountPath: /config
        - name: plex-metrics
          image: plex_exporter
          env:
            - name: PLEX_SERVER
              value: http://localhost:32400
            - name: PLEX_TOKEN
              valueFrom:
                secretKeyRef:
                  key: PLEX_CLAIM
                  name: plex-token
            - name: PLEX_LOG_LEVEL
              value: debug
          resources:
            limits:
              memory: 64Mi
              cpu: 10m
            requests:
              memory: 32Mi
              cpu: 1m
          ports:
            - containerPort: 9594
              name: metrics
              protocol: TCP
        - name: sqlite-web
          image: sqlite-web
          env:
            - name: SQLITE_DATABASE
              value: /config/Library/Application Support/Plex Media Server/Plug-in Support/Databases/com.plexapp.plugins.library.db
            - name: SQLITE_WEB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: plex-sqlite-web
                  key: sqlite-web-password
          command:
            - sqlite_web
            - -H
            - "0.0.0.0"
            - -x
            - /config/Library/Application\ Support/Plex\ Media\ Server/Plug-in\ Support/Databases/com.plexapp.plugins.library.db
          ports:
            - containerPort: 8080
              name: sqlite-web-http
              protocol: TCP
          resources:
            limits:
              memory: 128Mi
              cpu: 100m
            requests:
              memory: 32Mi
              cpu: 10m
          volumeMounts:
            - name: config
              mountPath: /config
      nodeSelector:
        intel.feature.node.kubernetes.io/gpu: "true"
      volumes:
        - name: datassd
          persistentVolumeClaim:
            claimName: shared-media-ssd
        - name: datahdd
          persistentVolumeClaim:
            claimName: shared-media-hdd
        - name: config
          persistentVolumeClaim:
            claimName: plex-config
        - name: transcode
          emptyDir: {}
        - name: log-config
          configMap:
            name: plex-log-config
