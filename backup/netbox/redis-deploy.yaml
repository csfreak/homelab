apiVersion: apps/v1
kind: Deployment
metadata:
  name: netbox-redis
  namespace: netbox
  labels:
    app: netbox
  annotations:
    app.kubernetes.io/component: redis
    app.kubernetes.io/instance: netbox
    app.kubernetes.io/part-of: netbox
    image.openshift.io/triggers: >-
          [{"from":{"kind":"ImageStreamTag","name":"redis:5-el8","namespace":"openshift"},"fieldPath":"spec.template.spec.containers[?(@.name==\"redis\")].image"}]
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      deployment: netbox-redis
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: netbox-redis
        app: redis
        deployment: netbox-redis
      annotations:
        app.kubernetes.io/component: redis
        app.kubernetes.io/instance: netbox
        app.kubernetes.io/part-of: netbox
    spec:
      containers:
        - env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: netbox-redis
          image: redis:5-el8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 6379
            timeoutSeconds: 1
          name: redis
          ports:
            - containerPort: 6379
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -i
                - -c
                - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 100M
              cpu: 50m
            requests:
              memory: 50M
              cpu: 10m
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/lib/redis/data
              name: netbox-redis-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - emptyDir: {}
          name: netbox-redis-data